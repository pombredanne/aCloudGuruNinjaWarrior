#################################################################################
#pcsn_foundation
#################################################################################
AWSTemplateFormatVersion: "2010-09-09"
Description: "PCSN foundation template"

#################################################################################
#Input parameters
#################################################################################
#future - add parameter labels and meta data
#future - look at use of stacksets (e.g for multiple accounts)
#future - use regioninstance id in naming of lambda functions, dyd table and queues to avoid clash when creating more than one pcsn instance in a region
#future - add mgt subnets1-4 as are required by some vnfs, such as cisco sdwan
#future - add autosnapshotting of vnf via new lifecycle manager
#future - add min dyd capacity unit of 1
#future - use of stack policy to prevent accidental updates to stack resources.
##future - switchable between ipv4 and ipv6
#Standard ipv6 settings (donâ€™t get a choice) vpc - /56 Subnet/64
#Subnet address example 2a05:d01c:087b:a4		::/64
#Add routes in ipv6
#Securtiy groups in ipv6 Use ::/0  for all



Parameters:
  NetworkVPCID:
    Description: 'ID of VPC to deploy PCSN to'
    Type: AWS::EC2::VPC::Id
  NetworkAddressRange:
    Description: 'First 3 octects (in format aaa.bbb.ccc)of /24 address range to use for PCSN'
    Type: String
  NetworkExternalAddressRanges:
    Description: 'List of address ranges outside VPC to route to upon egress from VPC'
    Type: String
  NetworkInternalHostAddressRanges:
    Description: 'List of subnet address ranges inside VPC to route to upon ingress into VPC'
    Type: String
  VNFServiceChain:
    Description: 'VNF Service chain in format WAN<->VNF<->VNF<->VNF<->Hosts'
    Type: String
  FlavourResilience:
    Description: 'Resilience flavour'
    Type: String
    Default: 'MultiAZ'
    AllowedValues: ['MultiAZ','SingleAZ']
  FlavourPerformance:
    Description: 'Performance flavour'
    Type: String
    Default: 'High'
    AllowedValues: ['High','Restricted']
  VNFNokiaSDWANMgtAddressRanges:
    Description: 'List of address ranges VNF will be managed from'
    Type: String
    Default: false
  VNFNokiaSDWANUserData:
    Description: 'User data for bootstrapping'
    Type: String
    Default: false
  VNFNokiaSDWANMonitor:
    Description: 'Switch infra monitoring on/off for this VNF. Set to true to switch on'
    Type: String
    Default: 'false'
  VNFCiscoSDWANMgtAddressRanges:
    Description: 'List of address ranges VNF will be managed from'
    Type: String
    Default: false
  VNFCiscoSDWANUserData:
    Description: 'User data item for bootstrapping'
    Type: String
    Default: false
  VNFCiscoSDWANMonitor:
    Description: 'Switch infra monitoring on/off for this VNF. Set to true to switch on'
    Type: String
    Default: 'false'
  VNFFortinetMgtAddressRanges:
    Description: 'List of address ranges VNF will be managed from'
    Type: String
    Default: false
  VNFFortinetUserData:
    Description: 'User data item for bootstrapping'
    Type: String
    Default: false
  VNFFortinetMonitor:
    Description: 'Switch infra monitoring on/off for this VNF. Set to true to switch on'
    Type: String
    Default: 'false'
  VNFRiverbedMgtAddressRanges:
    Description: 'List of address ranges VNF will be managed from'
    Type: String
    Default: false
  VNFRiverbedUserData:
    Description: 'User data item for bootstrapping'
    Type: String
    Default: false
  VNFRiverbedMonitor:
    Description: 'Switch infra monitoring on/off for this VNF. Set to true to switch on'
    Type: String
    Default: 'false'
  MiscFlowLogs:
    Description: 'Switch flow logging on/off. Set to true to switch on'
    Type: String
    Default: 'false'
  MiscRegionInstance:
    Description: 'Instance of pcsn deployment within region.'
    Type: Number
    Default: 1
  MiscDeployTestApp:
    Description: 'Deploy test application'
    Type: String
    Default: 'true'
    AllowedValues: ['true','false']
  MiscDevTest:
    Description: 'Set to true for dev and testing. Triggers devtest env specific actions'
    Type: String
    Default: 'false'
  MiscDevTestNokiaSDWANLANIf:
    Description: 'For dev/test only. Existing lan interface. So can use pre-boostrapped image'
    Type: String
    Default: 'false'
  MiscDevTestNokiaSDWANAMI:
    Description: 'For dev/test only. ami image. So can use pre-boostrapped image'
    Type: String
    Default: 'false'
  MiscTestAppTargetAddresses:
    Description: 'List of target addresses test app is to send traffic to for network tests'
    Type: String
    Default: 'false'
  MiscTimeStampCreate:
    Description: 'Date and time of pcsn creation for audit purposes'
    Type: String
    Default: 'false'
  MiscTimeStampUpdate:
    Description: 'Date and time of pcsn updates for audit purposes'
    Type: String

#################################################################################
#Conditions
#################################################################################
Conditions: 
   MultiAZ: !Equals [!Ref FlavourResilience, 'High Availability' ]
   NotMultiAZ: !Not [!Equals [!Ref FlavourResilience, 'High Availability'] ]
   DeployTestApp: !Equals [ !Ref MiscDeployTestApp, 'true' ]
   DeployNokiaSDWAN: !Or [!Equals [ !Ref VNFServiceChain, 'WAN<->Nokia SDWAN<->Hosts' ],!Equals [ !Ref VNFServiceChain, 'WAN<->Nokia SDWAN<->Fortinet<->Hosts' ], !Equals [ !Ref VNFServiceChain, 'WAN<->Nokia SDWAN<->Fortinet<->Riverbed<->Hosts' ], !Equals [ !Ref VNFServiceChain, 'WAN<->Nokia SDWAN<->Riverbed<->Hosts' ]  ]
   DeployCiscoSDWAN: !Or [!Equals [ !Ref VNFServiceChain, 'WAN<->Cisco SDWAN<->Hosts' ],!Equals [ !Ref VNFServiceChain, 'WAN<->Cisco SDWAN<->Fortinet<->Hosts' ], !Equals [ !Ref VNFServiceChain, 'WAN<->Cisco SDWAN<->Fortinet<->Riverbed<->Hosts' ], !Equals [ !Ref VNFServiceChain, 'WAN<->Cisco SDWAN<->Riverbed<->Hosts' ]  ]
   DeployFortinet: !Or [!Equals [ !Ref VNFServiceChain, 'WAN<->Fortinet<->Hosts' ],!Equals [ !Ref VNFServiceChain, 'WAN<->Nokia SDWAN<->Fortinet<->Hosts' ], !Equals [ !Ref VNFServiceChain, 'WAN<->Nokia SDWAN<->Fortinet<->Riverbed<->Hosts' ], !Equals [ !Ref VNFServiceChain, 'WAN<->Cisco SDWAN<->Fortinet<->Hosts' ], !Equals [ !Ref VNFServiceChain, 'WAN<->Cisco SDWAN<->Fortinet<->Riverbed<->Hosts' ]  ]
   DeployRiverbed: !Or [!Equals [ !Ref VNFServiceChain, 'WAN<->Riverbed<->Hosts' ],!Equals [ !Ref VNFServiceChain, 'WAN<->Nokia SDWAN<->Riverbed<->Hosts' ], !Equals [ !Ref VNFServiceChain, 'WAN<->Nokia SDWAN<->Fortinet<->Riverbed<->Hosts' ], !Equals [ !Ref VNFServiceChain, 'WAN<->Cisco SDWAN<->Riverbed<->Hosts' ], !Equals [ !Ref VNFServiceChain, 'WAN<->Cisco SDWAN<->Fortinet<->Riverbed<->Hosts' ]  ]
   DevTest: !Equals [ !Ref MiscDevTest, 'true' ]
   NokiaSDWANMonitorOn: !Equals [ !Ref VNFNokiaSDWANMonitor, 'true' ] 
   CiscoSDWANMonitorOn: !Equals [ !Ref VNFCiscoSDWANMonitor, 'true' ] 
   FortinetMonitorOn: !Equals [ !Ref VNFFortinetMonitor, 'true' ] 
   RiverbedMonitorOn: !Equals [ !Ref VNFRiverbedMonitor, 'true' ] 
   FlowLogsOn: !Equals [ !Ref MiscFlowLogs, 'true' ] 
   FirstPCSNInstance: !Equals [ !Ref MiscRegionInstance, 1 ]

#################################################################################
#Subnets
#################################################################################
Resources:

  SubnetA1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '${NetworkAddressRange}.0/28'
      MapPublicIpOnLaunch: false
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_sub_${AWS::Region}_a1_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  SubnetA2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
 #     CidrBlock: !If [ DevTest, !Ref MiscDevTestNokiaSDWANLANSubnet, !Sub '${NetworkAddressRange}.16/28']
      CidrBlock: !Sub '${NetworkAddressRange}.16/28'
      MapPublicIpOnLaunch: false
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_sub_${AWS::Region}_a2_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  SubnetA3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '${NetworkAddressRange}.32/28'
      MapPublicIpOnLaunch: false
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_sub_${AWS::Region}_a3_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  SubnetA4:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '${NetworkAddressRange}.48/28'
      MapPublicIpOnLaunch: false
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_sub_${AWS::Region}_a4_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  SubnetB1:
    Type: 'AWS::EC2::Subnet'
    Condition: MultiAZ
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '${NetworkAddressRange}.64/28'
      MapPublicIpOnLaunch: false
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_sub_${AWS::Region}_b1_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  SubnetB2:
    Type: 'AWS::EC2::Subnet'
    Condition: MultiAZ
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '${NetworkAddressRange}.80/28'
      MapPublicIpOnLaunch: false
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_sub_${AWS::Region}_b2_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  SubnetB3:
    Type: 'AWS::EC2::Subnet'
    Condition: MultiAZ
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '${NetworkAddressRange}.96/28'
      MapPublicIpOnLaunch: false
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_sub_${AWS::Region}_b3_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  SubnetB4:
    Type: 'AWS::EC2::Subnet'
    Condition: MultiAZ
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '${NetworkAddressRange}.112/28'
      MapPublicIpOnLaunch: false
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_sub_${AWS::Region}_b4_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate

  SubnetTestAppA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '${NetworkAddressRange}.128/28'
      MapPublicIpOnLaunch: false
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_sub_${AWS::Region}_atst_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  SubnetTestAppB:
    Type: 'AWS::EC2::Subnet'
    Condition: MultiAZ
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '${NetworkAddressRange}.144/28'
      MapPublicIpOnLaunch: false
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_sub_${AWS::Region}_btst_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
#################################################################################
#Route Tables
#################################################################################

  RouteTableA1: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_rt_${AWS::Region}_a1_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  RouteTableA2: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_rt_${AWS::Region}_a2_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  RouteTableA3: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_rt_${AWS::Region}_a3_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  RouteTableA4: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_rt_${AWS::Region}_a4_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  RouteTableB1: 
    Condition: MultiAZ
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_rt_${AWS::Region}_b1_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  RouteTableB2: 
    Type: 'AWS::EC2::RouteTable'
    Condition: MultiAZ
    Properties:
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_rt_${AWS::Region}_b2_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  RouteTableB3: 
    Type: 'AWS::EC2::RouteTable'
    Condition: MultiAZ
    Properties:
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_rt_${AWS::Region}_b3_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  RouteTableB4: 
    Type: 'AWS::EC2::RouteTable'
    Condition: MultiAZ
    Properties:
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_rt_${AWS::Region}_b4_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  RouteTableTestAppA: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_rt_${AWS::Region}_atst_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  RouteTableTestAppB: 
    Type: 'AWS::EC2::RouteTable'
    Condition: MultiAZ
    Properties:
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_rt_${AWS::Region}_btst_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  RouteTableAssociationA1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetA1
      RouteTableId: !Ref RouteTableA1
  RouteTableAssociationA2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetA2
      RouteTableId: !Ref RouteTableA2
  RouteTableAssociationA3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetA3
      RouteTableId: !Ref RouteTableA3
  RouteTableAssociationA4:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetA4
      RouteTableId: !Ref RouteTableA4
  RouteTableAssociationB1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: MultiAZ
    Properties:
      SubnetId: !Ref SubnetB1
      RouteTableId: !Ref RouteTableB1
  RouteTableAssociationB2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: MultiAZ
    Properties:
      SubnetId: !Ref SubnetB2
      RouteTableId: !Ref RouteTableB2
  RouteTableAssociationB3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: MultiAZ
    Properties:
      SubnetId: !Ref SubnetB3
      RouteTableId: !Ref RouteTableB3
  RouteTableAssociationB4:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: MultiAZ
    Properties:
      SubnetId: !Ref SubnetB4
      RouteTableId: !Ref RouteTableB4
  RouteTableAssociationTestAppA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetTestAppA
      RouteTableId: !Ref RouteTableTestAppA
  RouteTableAssociationTestAppB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: MultiAZ
    Properties:
      SubnetId: !Ref SubnetTestAppB
      RouteTableId: !Ref RouteTableTestAppB

      
#################################################################################
#Network ACLs
#################################################################################
#future - create nacls for teat app

  NetworkAclA1:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_nacl_${AWS::Region}_a1_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  NetworkAclA2:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_nacl_${AWS::Region}_a2_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  NetworkAclA3:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_nacl_${AWS::Region}_a3_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  NetworkAclA4:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_nacl_${AWS::Region}_a4_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  NetworkAclB1:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: MultiAZ
    Properties:
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_nacl_${AWS::Region}_b1_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  NetworkAclB2:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: MultiAZ
    Properties:
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_nacl_${AWS::Region}_b2_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  NetworkAclB3:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: MultiAZ
    Properties:
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_nacl_${AWS::Region}_b3_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  NetworkAclB4:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: MultiAZ
    Properties:
      VpcId: !Ref NetworkVPCID
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_nacl_${AWS::Region}_b4_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  SubnetNetworkAclAssociationA1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetA1
      NetworkAclId: !Ref NetworkAclA1
  SubnetNetworkAclAssociationA2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetA2
      NetworkAclId: !Ref NetworkAclA2
  SubnetNetworkAclAssociationA3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetA3
      NetworkAclId: !Ref NetworkAclA3
  SubnetNetworkAclAssociationA4:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetA4
      NetworkAclId: !Ref NetworkAclA4
  SubnetNetworkAclAssociationB1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: MultiAZ
    Properties:
      SubnetId: !Ref SubnetB1
      NetworkAclId: !Ref NetworkAclB1
  SubnetNetworkAclAssociationB2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: MultiAZ
    Properties:
      SubnetId: !Ref SubnetB2
      NetworkAclId: !Ref NetworkAclB2
  SubnetNetworkAclAssociationB3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: MultiAZ
    Properties:
      SubnetId: !Ref SubnetB3
      NetworkAclId: !Ref NetworkAclB3
  SubnetNetworkAclAssociationB4:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: MultiAZ
    Properties:
      SubnetId: !Ref SubnetB4
      NetworkAclId: !Ref NetworkAclB4

#Default NACLS for each subnet which should be updated and restricted by VNF specific stacks 
  NetworkAclEntryInA1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclA1
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOut1A1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclA1
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInA2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclA2
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOut1A2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclA2
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInA3:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclA3
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOut1A3:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclA3
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInA4:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclA4
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOut1A4:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclA4
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInB1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: MultiAZ
    Properties:
      NetworkAclId: !Ref NetworkAclB1
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOut1B1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: MultiAZ
    Properties:
      NetworkAclId: !Ref NetworkAclB1
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInB2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: MultiAZ
    Properties:
      NetworkAclId: !Ref NetworkAclB2
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOut1B2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: MultiAZ
    Properties:
      NetworkAclId: !Ref NetworkAclB2
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInB3:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: MultiAZ
    Properties:
      NetworkAclId: !Ref NetworkAclB3
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOut1B3:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: MultiAZ
    Properties:
      NetworkAclId: !Ref NetworkAclB3
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInB4:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: MultiAZ
    Properties:
      NetworkAclId: !Ref NetworkAclB4
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOut1B4:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: MultiAZ
    Properties:
      NetworkAclId: !Ref NetworkAclB4
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      
#################################################################################
#Placement Groups
#################################################################################
  PlacementGroupA:
    Type: AWS::EC2::PlacementGroup
    Properties:
      Strategy: cluster
  PlacementGroupB:
    Type: AWS::EC2::PlacementGroup
    Properties:
      Strategy: cluster


#################################################################################
#Key pairs
#################################################################################
#future. Can't create key pairs directoyl from cf. Need to use custom resource. See link below. For now just use user/pw logon 
#https://xebia.com/blog/deploying-private-key-pairs-aws-cloudformation
  
#################################################################################
#VNF Child stacks
#################################################################################
#future - look at cf options for instance config / optimisation.
#future - pass in params for second subnet for HA. Likely need a HA version of the resource using the multiAZ condition where A and B info is passed
#future - maybe create EIPs here and passthrough to vnf stack. but may be quick specific to vnf so for now leave to vnf stack

  CiscoSDWANStack:
    Type: AWS::CloudFormation::Stack
    Condition: DeployCiscoSDWAN
    Properties:
      TemplateURL: https://s3.amazonaws.com/btdynspcsn/cftemplates/pcsn_cft_vnf_sdwan.yml
      TimeoutInMinutes: '5'
      Parameters:
        VPCID: !Ref NetworkVPCID
        InstanceName: !Sub 'btpcsn_vnf_ciscosdwan_${AWS::Region}_${MiscRegionInstance}_${NetworkVPCID}'
        SubnetWAN: !Ref SubnetA1
        SubnetLAN: !Ref SubnetA2
        NaclWAN: !Ref NetworkAclA1
        NaclLAN: !Ref NetworkAclA2
        PlacementGroup: !Ref PlacementGroupA
        FlavourPerformance: !Ref FlavourPerformance
        SDWANType: 'Cisco'
        UserDataCisco: !Ref VNFCiscoSDWANUserData
        DevTest: !Ref MiscDevTest
        Created: !Ref MiscTimeStampCreate
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_cfs_ciscosdwan_${AWS::Region}_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate

  NokiaSDWANStack:
    Type: AWS::CloudFormation::Stack
    Condition: DeployNokiaSDWAN
    Properties:
      TemplateURL: https://s3.amazonaws.com/btdynspcsn/cftemplates/pcsn_cft_vnf_sdwan.yml
      TimeoutInMinutes: '5'
      Parameters:
        VPCID: !Ref NetworkVPCID
        InstanceName:  !Sub 'btpcsn_vnf_nokiasdwan_${AWS::Region}_${MiscRegionInstance}_${NetworkVPCID}'
        SubnetWAN: !Ref SubnetA1
        SubnetLAN: !Ref SubnetA2
        NaclWAN: !Ref NetworkAclA1
        NaclLAN: !Ref NetworkAclA2
        PlacementGroup: !Ref PlacementGroupA
        FlavourPerformance: !Ref FlavourPerformance
        SDWANType:  Nokia
        UserDataNokia: !Ref VNFNokiaSDWANUserData
        MiscDevTest: !Ref MiscDevTest
        MiscDevTestNokiaSDWANLANIf: !Ref MiscDevTestNokiaSDWANLANIf
        MiscDevTestNokiaSDWANAMI: !Ref MiscDevTestNokiaSDWANAMI
        Created: !Ref MiscTimeStampCreate
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_cfs_nokiasdwan_${AWS::Region}_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate

#tbd - pass in devtest ip address for wan interface so can use prebootstrap
  FortinetStack:
    Type: AWS::CloudFormation::Stack
    Condition: DeployFortinet
    Properties:
      TemplateURL: https://s3.amazonaws.com/btdynspcsn/cftemplates/pcsn_cft_vnf_others.yml
      TimeoutInMinutes: '5'
      Parameters:
        VPCID: !Ref NetworkVPCID
        InstanceName:  !Sub 'btpcsn_vnf_fortinet_${AWS::Region}_${MiscRegionInstance}_${NetworkVPCID}'
        SubnetWAN: !Ref SubnetA2
        SubnetLAN: !Ref SubnetA3
        NaclWAN: !Ref NetworkAclA2
        NaclLAN: !Ref NetworkAclA3
        PlacementGroup: !Ref PlacementGroupA
        UserData: !Ref VNFFortinetUserData
        FlavourPerformance: !Ref FlavourPerformance
        VNFType: 'Fortinet'
        DeploymentType: 'Fixed'
        DevTest: !Ref MiscDevTest
        Created: !Ref MiscTimeStampCreate
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_cfs_fortinet_${AWS::Region}_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate

#future - add in riverbed
  RiverbedStack:
    Type: AWS::CloudFormation::Stack
    Condition: DeployRiverbed
    Properties:
      TemplateURL: https://s3.amazonaws.com/btdynspcsn/cftemplates/pcsn_cft_vnf_patterns.yml
      TimeoutInMinutes: '5'
      Parameters:
        SubnetWAN: !Ref SubnetA1
        SubnetLAN: !Ref SubnetA2
        NaclWAN: !Ref NetworkAclA1
        NaclLAN: !Ref NetworkAclA2
        PlacementGroup: !Ref PlacementGroupA
        FlavourPerformance: !Ref FlavourPerformance
        UserData: !Ref VNFRiverbedUserData
        MiscDevTest: !Ref MiscDevTest
        MiscTimeStampCreate: !Ref MiscTimeStampCreate
        MiscTimeStampUpdate: !Ref MiscTimeStampUpdate
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_cfs_riverbed_${AWS::Region}_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate

#################################################################################
#Test App Child Stack
################################################################################
#future - set up on both AZs for HA

  TestAppStack:
    Type: AWS::CloudFormation::Stack
    Condition: DeployTestApp
    Properties:
       TemplateURL: https://s3.amazonaws.com/btdynspcsn/cftemplates/pcsn_cft_testapp.yml
       TimeoutInMinutes: '15'
       Parameters:
          VPCID: !Ref NetworkVPCID
          SubnetTestID: !Ref SubnetTestAppA
          InstanceNameTest: !Sub 'btpcsn_vnf_testApp_${AWS::Region}_${MiscRegionInstance}_${NetworkVPCID}'
          Created: !Ref MiscTimeStampCreate
          RequestQueue: !Sub 'btpcsn_sqs_testapp_req_${AWS::Region}_${MiscRegionInstance}_${NetworkVPCID}'
          ResponseQueue: !Sub 'btpcsn_sqs_testapp_resp_${AWS::Region}_${MiscRegionInstance}_${NetworkVPCID}'

       Tags:
       - Key: Name
         Value: !Sub 'btpcsn_cfs_testApp_${AWS::Region}_${MiscRegionInstance}_${NetworkVPCID}'
       - Key: BT-PCSN-RESOURCE
         Value: true
       - Key: Created
         Value: !Ref MiscTimeStampCreate

#################################################################################
#Lambda Helper functions - install
#################################################################################
#future - refine lambda settings such as memory, timeout etc
  LAMUpdateRouting:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'btpcsn_lam_updateRouting' 
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      Description: >-
        BT PCSN - Updates VNF routing tables depending on service chain and
        customer subnet ranges to route to.
      MemorySize: 128
      Timeout: 10
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/btpcsn_iam_role'
      Code: 
         S3Bucket: "btdynspcsn"
         S3Key: "lamfunctions/btpcsn_lam_updateRouting.zip"
      Tags:
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  LAMLogActivity:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'btpcsn_lam_logActivity' 
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      Description: >-
        BT PCSN - Logs create/modify/delete deployment activity.
      MemorySize: 128
      Timeout: 10
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/btpcsn_iam_role'
      Code: 
         S3Bucket: "btdynspcsn"
         S3Key: "lamfunctions/btpcsn_lam_logActivity.zip"
      Tags:
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
  LAMGetAdditionalNetworkInfo:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: 'btpcsn_lam_getAdditionalNetworkInfo' 
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      Description: >-
        BT PCSN - gets additional network info that isn't available from standard cloudformation.
      MemorySize: 128
      Timeout: 10
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/btpcsn_iam_role'
      Code: 
         S3Bucket: "btdynspcsn"
         S3Key: "lamfunctions/btpcsn_lam_getAdditionalNetworkInfo.zip"
      Tags:
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate
#future - add in later
#  LAMRunNetworkTests:
#    Type: "AWS::Lambda::Function"
#    Properties:
#      FunctionName: 'btpcsn_lam_runNetworkTests' 
#      Handler: lambda_function.lambda_handler
#      Runtime: python3.6
#      Description: >-
#        BT PCSN - Run network tests to prove correct config upon create/modify.
#      MemorySize: 128
#      Timeout: 10
#      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/btpcsn_iam_role'
#      Code: 
#        S3Bucket: "btdynspcsn"
#        S3Key: "lamfunctions/btpcsn_lam_runNetworkTests.zip"
#      Tags:
#      - Key: BT-PCSN-RESOURCE
#        Value: true
#      - Key: Created
#        Value: !Ref MiscTimeStampCreate

  DYDActivityLog:
    Type: AWS::DynamoDB::Table
    Properties:
      #TableName: "btpcsn_dyd_activityLog"
      TableName: !Sub 'btpcsn_dyd_activityLog_${AWS::Region}_${MiscRegionInstance}_${NetworkVPCID}'
      KeySchema:
        -
          AttributeName: "timeStamp"
          KeyType: "HASH"
      AttributeDefinitions: 
        - 
          AttributeName: "timeStamp"
          AttributeType: "S"

      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      Tags:
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate

  #future - add network tests dyd table here
  
#################################################################################
#Future - Call childstack to create flow logs
#################################################################################
  FlowLogsSubnetA1:     
    Type: AWS::CloudFormation::Stack
    Condition: FlowLogsOn
    Properties:
      TemplateURL: https://s3.amazonaws.com/btdynspcsn/cftemplates/pcsn_cft_flowlogs.yml
      TimeoutInMinutes: '5'
      Parameters:
         SubnetA1: !Ref SubnetA1
         SubnetA2: !Ref SubnetA2
         SubnetA3: !Ref SubnetA3
         SubnetA4: !Ref SubnetA4
         SubnetB1: !If [MultiAZ, !Ref SubnetB1, ""]
         SubnetB2: !If [MultiAZ, !Ref SubnetB2, ""]
         SubnetB3: !If [MultiAZ, !Ref SubnetB3, ""]
         SubnetB4: !If [MultiAZ, !Ref SubnetB4, ""]
         FlavourResilience: !Ref FlavourResilience
         NetworkVPCID: !Ref NetworkVPCID
         MiscRegionInstance: !Ref  MiscRegionInstance
      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_cfs_flowlogs_${AWS::Region}_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate

#################################################################################
#Monitoring
#################################################################################
#future - config settings by vnf. Param format example Monitoring_GenericAlarms _<VNF Name>  90,true,true, ...  (cpu threshold, systemcehck,instancecheck)
#future - for now just proving this with cisoc/nokiasdwan. Add other VNFs later. 
#
  MonitoringStackNokiaSDWAN:
    Type: AWS::CloudFormation::Stack
    Condition: NokiaSDWANMonitorOn
    Properties:
      TemplateURL: https://s3.amazonaws.com/btdynspcsn/cftemplates/pcsn_cft_vnf_monitoring.yml
      TimeoutInMinutes: '5'
      Parameters:
         InstanceID: !GetAtt NokiaSDWANStack.Outputs.nsgInstanceID
         VNFName: 'NokiaSDWAN'
         AlarmNameBase: !Sub 'btpcsn_vnf_nokiasdwanMon_${AWS::Region}_${MiscRegionInstance}_${NetworkVPCID}'
         Created: !Ref MiscTimeStampCreate

      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_cfs_nokiasdwanMon_${AWS::Region}_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate

  MonitoringStackCiscoSDWAN:
    Type: AWS::CloudFormation::Stack
    Condition: CiscoSDWANMonitorOn
    Properties:
      TemplateURL: https://s3.amazonaws.com/btdynspcsn/cftemplates/pcsn_cft_vnf_monitoring.yml
      TimeoutInMinutes: '5'
      Parameters:
         InstanceID: !GetAtt CiscoSDWANStack.Outputs.vedgeInstanceID
         VNFName: 'CiscoSDWAN'
         AlarmNameBase: !Sub 'btpcsn_vnf_ciscosdwanMon_${AWS::Region}_${MiscRegionInstance}_${NetworkVPCID}'
         Created: !Ref MiscTimeStampCreate

      Tags:
      - Key: Name
        Value: !Sub 'btpcsn_cfs_ciscosdwanMon_${AWS::Region}_${MiscRegionInstance}_${NetworkVPCID}'
      - Key: BT-PCSN-RESOURCE
        Value: true

#################################################################################
#Lambda Helper functions - invoke
#################################################################################
#TBD - use date as param. forces routines to run upon update since date will have changed

  RunUpdateRouting:
    Type: Custom::UpdateRouting
    DependsOn: ["LAMUpdateRouting"]
    #DependsOn: ["LAMUpdateRouting","SubnetA1","SubnetA2","SubnetA3","SubnetA4","RouteTableA1","RouteTableA2","RouteTableA3","RouteTableA4","RouteTableAssociationA1","RouteTableAssociationA2","RouteTableAssociationA3","RouteTableAssociationA4","CiscoSDWANStack"]
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:btpcsn_lam_updateRouting" 
      Region: !Sub '${AWS::Region}'
      invokeType: 'cf'
      vpcID:  !Ref NetworkVPCID
      serviceChain:  !Ref VNFServiceChain
      externalAddressRanges:  !Ref NetworkExternalAddressRanges
      customerHostSubnets:  !Ref NetworkInternalHostAddressRanges
      routeTable1:  !Ref RouteTableA1
      routeTable2:  !Ref RouteTableA2
      routeTable3:  !Ref RouteTableA3
      routeTable4:  !Ref RouteTableA4
      routeTableTestAppA:  !Ref RouteTableTestAppA
      eniWAN1:    !If [DeployCiscoSDWAN, !GetAtt CiscoSDWANStack.Outputs.vedgeWANENI, !If [DeployNokiaSDWAN, !GetAtt NokiaSDWANStack.Outputs.nsgWANENI, ""]  ]
      eniLAN1:    !If [DeployCiscoSDWAN, !GetAtt CiscoSDWANStack.Outputs.vedgeLANENI, !If [DeployNokiaSDWAN, !GetAtt NokiaSDWANStack.Outputs.nsgLANENI, ""]  ]
      eniWAN2:    !If [DeployFortinet, !GetAtt FortinetStack.Outputs.fortinetWANENI, ""]
      eniLAN2:    !If [DeployFortinet, !GetAtt FortinetStack.Outputs.fortinetLANENI, ""]
      eniWAN3:    !If [DeployRiverbed, !GetAtt FortinetStack.Outputs.riverbedWANENI, ""]
      eniLAN3:    !If [DeployRiverbed, !GetAtt FortinetStack.Outputs.riverbedLANENI, ""]
      enitestApp: !If [DeployTestApp, !GetAtt  TestAppStack.Outputs.NetworkENITest, ""]
      testAppSubnet: !If [DeployTestApp, !Ref SubnetTestAppA, ""]
      NokiaSDWANMgtAddressRange: !If [DeployNokiaSDWAN, !Ref VNFNokiaSDWANMgtAddressRanges, ""]
      CiscoSDWANMgtAddressRange: !If [DeployCiscoSDWAN, !Ref VNFCiscoSDWANMgtAddressRanges, ""]
      FortinetMgtAddressRange: !If [DeployFortinet, !Ref VNFFortinetMgtAddressRanges, ""]
      RiverbedSDWANMgtAddressRange: !If [DeployRiverbed, !Ref VNFRiverbedMgtAddressRanges, ""]
      Tags:
      - Key: BT-PCSN-RESOURCE
        Value: true
      - Key: Created
        Value: !Ref MiscTimeStampCreate

#future - dof required by srims
#  GetAdditionalNetworkInfo:
#    Type: Custom::GetAdditionalNetworkInfo
#    Condition: DeployNokiaSDWAN
#    Properties:
#       ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:btpcsn_lam_getNetworkInfo" 
#       Region: !Sub '${AWS::Region}'
#       infoType: 'getEniMacAddress'
#       eniID:  !GetAtt NokiaSDWANStack.NokiaWANENI
#       invokeType": 'cf'
#       Tags:
#       - Key: BT-PCSN-RESOURCE
#         Value: true
#       - Key: Created
#         Value: !Ref MiscTimeStampCreate

  RunLogActivity:
    Type: Custom::LogActivity
    DependsOn: ["LAMLogActivity","DYDActivityLog","RunUpdateRouting"]
    Properties:
       ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:btpcsn_lam_logActivity" 
       Region: !Sub '${AWS::Region}'
       StackName: !Sub '${AWS::StackName}'
#      params: "chain=SDWAN>FW;res=High Availability;perf=High;external_cidr=..." 
       params: !Join [ ":", [  !Sub 'NetworkAddressRange,=${NetworkAddressRange}', !Sub 'NetworkExternalAddressRanges=${NetworkExternalAddressRanges}', !Sub 'NetworkInternalHostAddressRanges=${NetworkInternalHostAddressRanges}', !Sub 'VNFServiceChain=${VNFServiceChain}', !Sub 'FlavourResilience=${FlavourResilience}', !Sub 'FlavourPerformance=${FlavourPerformance}', !Sub 'VNFNokiaSDWANMgtAddressRanges=${VNFNokiaSDWANMgtAddressRanges}', !Sub 'VNFNokiaSDWANUserData=${VNFNokiaSDWANUserData', !Sub 'VNFNokiaSDWANMonitor=${VNFNokiaSDWANMonitor}', !Sub 'VNFCiscoSDWANMgtAddressRanges=${VNFCiscoSDWANMgtAddressRanges}', !Sub 'VNFCiscoSDWANUserData=${VNFCiscoSDWANUserData}', !Sub 'CiscoSDWANMonitor=${VNFCiscoSDWANMonitor}', !Sub 'VNFFortinetMgtAddressRanges=${VNFFortinetMgtAddressRanges}', !Sub 'VNFFortinetUserData=${VNFFortinetUserData}', !Sub 'VNFFortinetMonitor=${VNFFortinetMonitor}', !Sub 'VNFRiverbedMgtAddressRanges=${VNFRiverbedMgtAddressRanges}', !Sub 'VNFRiverbedUserData=${VNFRiverbedUserData}', !Sub 'VNFRiverbedMonitor=${VNFRiverbedMonitor}', !Sub 'MiscFlowLogs=${MiscFlowLogs}', !Sub 'MiscRegionInstance=${MiscRegionInstance}', !Sub 'MiscDeployTestApp=${MiscDeployTestApp}', !Sub 'MiscDevTest=${MiscDevTest}', !Sub 'MiscTestAppTargetAddresses=${MiscTestAppTargetAddresses}', !Sub 'MiscTimeStampCreate=${MiscTimeStampCreate}', !Sub 'MiscTimeStampUpdate=${MiscTimeStampUpdate}' ]  ]
       #logTableName: 'btpcsn_dyd_activityLog'
       logTableName: !Sub 'btpcsn_dyd_activityLog_${AWS::Region}_${MiscRegionInstance}_${NetworkVPCID}'
       invokeType: 'cf'
       Tags:
       - Key: BT-PCSN-RESOURCE
         Value: true
       - Key: Created
         Value: !Ref MiscTimeStampCreate



#runnetworktests - future - get his working last - how can run network test upon creation of sdwan since srims will need some post config ? may need to call update afterwards setting testapp to Y
#invokeType: "lambdaTest",
#    "testParams": "target=123.123.123.123",

#################################################################################
#VNF Managers
#################################################################################
#see notes

#################################################################################
#Direct Connect - Placeholder
#################################################################################
#Placeholder for direct connect setup and connectivity
  
#################################################################################
#Outputs
#################################################################################
Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  AZs:
    Description: 'AZs'
    Value: 2
    Export:
      Name: !Sub '${AWS::StackName}-AZs'
  AZA:
    Description: 'AZ of A'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZA'
  AZB:
    Description: 'AZ of B'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZB'

 
 #Custom values required for VNF managers
 #future - add if required by srims
 # NokiaSDWANMACAddress:
 #   Description: ENI MAC address
 #   Value: !GetAtt AdditionalNetworkInfo.NokiaSDWANMACAddress
 #   Condition: DeployNokiaSDWAN
 
