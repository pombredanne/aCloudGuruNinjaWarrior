AWSTemplateFormatVersion: '2010-09-09'
Description: 'Create VPC: VPC and basic network plumbing / security'
#################################################################################
#Create VPC : A McNeill
#################################################################################

#################################################################################
#Inputs
#################################################################################

Parameters:
  VPCName:
    Description: 'Name of VPC to create'
    Type: String
  ClassABC:
    Description: 'Class ABC of VPC (XXX.XXX.XXX.0/24)'
    Type: String
  Resilience:
    Default: true
    Type: String
    AllowedValues: [true, false]
    Description: 'Add in Multi-AZ resilience or not'
    Type: String
  AlertContact1:
    Description: 'Address to send alert notifications to'
    Type: String
  AlertContact2:
    Description: 'Address to send alert notifications to'
    Type: String

Conditions: 
  MultiAZ: !Equals [ !Ref Resilience, true ]
  
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '${ClassABC}.0/24'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub '${VPCName}'
      - Key: Cost_ByVPC
        Value: !Ref VPCName
#TBD - could add in a tag for created by. Need to gather as input parameter (no pseudo parameter for this)


  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Sub 'IG_${VPCName}'
      - Key: Cost_ByVPC
        Value: !Ref VPCName
 
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
      
  SubnetA1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '${ClassABC}.0/28'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'AZa_Sub_SDWANnet_${VPCName}'
      - Key: Reach
        Value: public
      - Key: Cost_ByVPC
        Value: !Ref VPCName
  SubnetA2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '${ClassABC}.16/28'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'AZa_Sub_SDWANacc_${VPCName}'
      - Key: Reach
        Value: private
      - Key: Cost_ByVPC
        Value: !Ref VPCName
  SubnetB1:
    Type: 'AWS::EC2::Subnet'
    Condition: MultiAZ
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '${ClassABC}.32/28'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'AZb_Sub_SDWANnet_${VPCName}'
      - Key: Reach
        Value: public
      - Key: Cost_ByVPC
        Value: !Ref VPCName
  SubnetB2:
    Type: 'AWS::EC2::Subnet'
    Condition: MultiAZ
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '${ClassABC}.48/28'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'AZb_Sub_SDWANacc_${VPCName}'
      - Key: Reach
        Value: private
      - Key: Cost_ByVPC
        Value: !Ref VPCName
  RouteTableA1: # should be RouteTableAPublic, but logical id was not changed for backward compatibility
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'AZa_Rt_SDWANnet_${VPCName}'
      - Key: Cost_ByVPC
        Value: !Ref VPCName
  RouteTableA2: # should be RouteTableAPrivate, but logical id was not changed for backward compatibility
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'AZa_Rt_SDWANacc_${VPCName}'
      - Key: Cost_ByVPC
        Value: !Ref VPCName
  RouteTableB1:
    Type: 'AWS::EC2::RouteTable'
    Condition: MultiAZ
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'AZb_Rt_SDWANnet_${VPCName}'
      - Key: Cost_ByVPC
        Value: !Ref VPCName
  RouteTableB2:
    Type: 'AWS::EC2::RouteTable'
    Condition: MultiAZ
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'AZb_Rt_SDWANacc_${VPCName}'
      - Key: Cost_ByVPC
        Value: !Ref VPCName
  RouteTableAssociationA1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetA1
      RouteTableId: !Ref RouteTableA1
  RouteTableAssociationA2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetA2
      RouteTableId: !Ref RouteTableA2
  RouteTableAssociationB1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: MultiAZ
    Properties:
      SubnetId: !Ref SubnetB1
      RouteTableId: !Ref RouteTableB1
  RouteTableAssociationB2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: MultiAZ
    Properties:
      SubnetId: !Ref SubnetB2
      RouteTableId: !Ref RouteTableB2
  RouteTablePublicInternetRoute: # should be RouteTablePublicAInternetRoute, but logical id was not changed for backward compatibility
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableA1
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  RouteTablePublicBInternetRoute:
    Type: 'AWS::EC2::Route'
    Condition: MultiAZ
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableB1
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

      
 #Add nacls to vpc stack. Remove allow all entries and add in specific allow entries. Check default deny rule is created
 #tbd - add nacls per subnet type, not just public and private
 #possibly move acls to VNF stacks
  NetworkAcl1:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
      - Key: Cost_ByVPC
        Value: !Ref VPCName
  NetworkAcl2:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
      - Key: Cost_ByVPC
        Value: !Ref VPCName
  SubnetNetworkAclAssociationA1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetA1
      NetworkAclId: !Ref NetworkAcl1
  SubnetNetworkAclAssociationA2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetA2
      NetworkAclId: !Ref NetworkAcl2
  SubnetNetworkAclAssociationB1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: MultiAZ
    Properties:
      SubnetId: !Ref SubnetB1
      NetworkAclId: !Ref NetworkAcl1
  SubnetNetworkAclAssociationB2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: MultiAZ
    Properties:
      SubnetId: !Ref SubnetB2
      NetworkAclId: !Ref NetworkAcl2
  NetworkAclEntryIn1AllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl1
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOut1AllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl1
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl2
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl2
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      
 #Placement group – can’t see way of giving this a name. Seems to give a default name <stackname>-<resourceid>-<random string>
 # PlacementGroupA:
 #   Type: AWS::EC2::PlacementGroup
 #   Properties:
 #       Strategy: cluster
  #not supported      GroupName: 'AZa_Pg_${VPCName}_DYNS_MVPC'
 # PlacementGroupB:
 #   Type: AWS::EC2::PlacementGroup
 #   Properties:
 #       Strategy: cluster
  #not supported      GroupName: 'AZb_Pg_${VPCName}_DYNS_MVPC'
  
  
  #Placeholder for direct connect setup and connectivity
  
  
  #Placeholder for VPC peering / VPN resources. May have to put this in a separate stack
  #to create vpn, create ...
  #                vpg - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-gateway.html 
  #                vpn connection - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-connection.html 
  #                vpnroute (possibly) - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-connection-route.html 
  
  #################################################################
  #Policy creation for access to VPC . to be updated and tested
  #################################################################
  
  
  #Create group
  VPCIAMGroup:
    Type: "AWS::IAM::Group"
    Properties:
        GroupName: !Sub 'IAM_Group_${VPCName}'
  
  
  #TBD - could create multiple groups and in line policies. e.g read only etc
  
  #Create policy and attach to group
  VPCIAMPolicy:
    Type: "AWS::IAM::Policy"
    Properties: 
        Groups: 
            - !Ref VPCIAMGroup
        PolicyDocument:
            Version: "2012-10-17"
            Statement: 
            - 
                Effect: "Allow"
                Action: 
                    - "ec2:*"
                    - "vpc:*"

                Resource: "*"
                Condition:
                    StringEquals:
                        ec2:Vpc: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${VPC}       
        PolicyName: !Sub 'IAM_Policy_${VPCName}'
 
 
  #Add user to group
  VPCIAMUsers:
    Type: "AWS::IAM::UserToGroupAddition"
    Properties: 
        GroupName: !Ref VPCIAMGroup
        Users:
            - 'AndyMcneill'
    

  
  
  
  
  #Remove for now to avoid lots of mails
  #TBD - Don't think can send message from cf, probably need lambda function to do this.
  #note - cost allocation tags not yet supported
  #AlertSNSTopic1:
  #  Type: AWS::SNS::Topic
  #  Properties:
  #      Subscription:
  #      - Endpoint: !Sub '${AlertContact1}'
  #        Protocol: email
  #      - Endpoint: !Sub '${AlertContact2}'
  #        Protocol: email
  
  
  #Flowlogs - need to decide if have all or just against set subnets/interfaces or not at all
  #VPCFlowLog:     
  #  Type: "AWS::EC2::FlowLog"
  #  Properties:
  #      DeliverLogsPermissionArn : arn:aws:iam::813970735459:role/flrole
  #      LogGroupName : !Sub 'AZb_Fl_${VPCName}'
  #      ResourceId : !Ref VPC
  #      ResourceType : VPC
  #      TrafficType : ALL
    #TBD - check if tags are supported for this resource
    #Tags:  
    #  - Key: MVPC_Cost_ByVPC
    #    Value: !Ref VPCName
    #  - Key: MVPC_Cost_ByVPC
    #    Value: !Sub '${VPCName}-DYNS_MVPC'
 
 #TBD - Also maybe add cloudwatch log delivery to this
 # ClTrail: 
 #   Type: "AWS::CloudTrail::Trail"
 #   Properties: 
 #     S3BucketName: dynstestauditlogs
 #     IsLogging: true
 #     TrailName: !Sub 'Audit_${VPCName}_DYNS_MVPC'
    #TBD - check if tags are supported for this resource
    #Tags:
    #  - Key: MVPC_Cost_ByVPC
    #    Value: !Ref VPCName
    #  - Key: MVPC_Cost_ByVPC
    #    Value: !Sub '${VPCName}-DYNS_MVPC'

#################################################################################
#Outputs
#################################################################################
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'vpc/vpc-2azs'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '6.14.0'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  AZs:
    Description: 'AZs'
    Value: 2
    Export:
      Name: !Sub '${AWS::StackName}-AZs'
  AZA:
    Description: 'AZ of A'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZA'
  AZB:
    Description: 'AZ of B'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZB'
  ClassABC:
    Description: 'Class ABC.'
    Value: !Ref ClassABC
    Export:
      Name: !Sub '${AWS::StackName}-ClassABC'
  VPC:
    Description: 'VPC.'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  #SubnetsPublic:
  #  Description: 'Subnets public.'
  #  Value: !Join [',', [!Ref SubnetA1, !Ref SubnetB1]]
  #  Export:
  #    Name: !Sub '${AWS::StackName}-SubnetsPublic'
  #SubnetsPrivate:
  #  Description: 'Subnets private.'
  #  Value: !Join [',', [!Ref SubnetA2, !Ref SubnetB2]]
  #  Export:
  #    Name: !Sub '${AWS::StackName}-SubnetsPrivate'
  #RouteTablePrivate: # deprecated in v4, will be removed in v5
  #  Description: 'Route table private (deprecated in v4, will be removed in v5).'
  #  Value: !Ref RouteTablePrivate
  #  Export:
  #    Name: !Sub '${AWS::StackName}-RouteTablePrivate'
  #RouteTablePublic: # deprecated in v4, will be removed in v5
  #  Description: 'Route table public (deprecated in v4, will be removed in v5).'
  #  Value: !Ref RouteTablePublic
  #  Export:
  #    Name: !Sub '${AWS::StackName}-RouteTablePublic'
  #RouteTablesPrivate:
  #  Description: 'Route tables private.'
  #  Value: !Join [',', [!Ref RouteTablePrivate, !Ref RouteTableBPrivate]]
  #  Export:
  #    Name: !Sub '${AWS::StackName}-RouteTablesPrivate'
  #RouteTablesPublic:
  #  Description: 'Route tables public.'
  #  Value: !Join [',', [!Ref RouteTablePublic, !Ref RouteTableBPublic]]
  #  Export:
  #    Name: !Sub '${AWS::StackName}-RouteTablesPublic'
 # SubnetA1:
 #   Description: 'Subnet A1.'
 #   Value: !Ref SubnetA1
 #   Export:
 #     Name: !Sub '${AWS::StackName}-SubnetA1'
 # RouteTableA1:
 #   Description: 'Route table A1.'
 #   Value: !Ref RouteTableA1
 #   Export:
 #     Name: !Sub '${AWS::StackName}-RouteTableA1'
 #SubnetA2:
 #   Description: 'Subnet A2.'
 #   Value: !Ref SubnetA2
 #   Export:
 #     Name: !Sub '${AWS::StackName}-SubnetA2'
 # RouteTableA2:
 #   Description: 'Route table A2.'
 #   Value: !Ref RouteTableA2
 #   Export:
 #     Name: !Sub '${AWS::StackName}-RouteTableA2'
  SubnetB1:
    Description: 'Subnet B1.'
    Condition: MultiAZ
    Value: !Ref SubnetB1
    Export:
      Name: !Sub '${AWS::StackName}-SubnetB1'
  RouteTableB1:
    Description: 'Route table B1.'
    Condition: MultiAZ
    Value: !Ref RouteTableB1
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableB1'
  SubnetB2:
    Description: 'Subnet B2.'
    Condition: MultiAZ
    Value: !Ref SubnetB2
    Export:
      Name: !Sub '${AWS::StackName}-SubnetB2'
  RouteTableB2:
    Description: 'Route table B2.'
    Condition: MultiAZ
    Value: !Ref RouteTableB2
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableB2'
 # PlacementGroupA:
 #   Description: 'Placement GroupA.'
 #   Value: !Ref PlacementGroupA
 #   Export:
 #     Name: !Sub '${AWS::StackName}-PlacementGroupA'
 # PlacementGroupB:
 #   Description: 'Placement GroupB.'
 #   Value: !Ref PlacementGroupB
 #   Export:
 #     Name: !Sub '${AWS::StackName}-PlacementGroupB'
