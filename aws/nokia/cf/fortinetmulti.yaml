{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template to FortiGate AutoScaling Solution -- AWSMP::3124a694-441c-4ff1-8bf7-4d153be424a6::c5a54a55-09dc-4afa-b4a3-b66bdbd8f368",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Auto Scaling Configuration"
          },
          "Parameters": [
            "ScalingParameter",
            "ScaleUpThreshold",
            "ScaleDownThreshold",
            "ScalingPeriod",
            "ASGroupMaxSize",
            "ASQueue",
            "AZForFirewall1",
            "AZForFirewall2"
          ]
        },
        {
          "Label": {
            "default": "VPC Configuration"
          },
          "Parameters": [
            "VPCCIDR",
            "Public1Subnet",
            "Private1Subnet",
            "Public2Subnet",
            "Private2Subnet"
          ]
        },
        {
          "Label": {
            "default": "FortiGate Instance Configuration"
          },
          "Parameters": [
            "InitialFortiGateInstanceType",
            "FortiGateInstanceType",
            "CIDRForFortiGateAccess",
            "FortiGateKeyPair"
          ]
        },
        {
          "Label": {
            "default": "External ELB Configuration"
          },
          "Parameters": [
            "ListenerPort",
            "HealthCheckPort"
          ]
        },
        {
          "Label": {
            "default": "Internal ELB Configuration"
          },
          "Parameters": [
            "InternalListenerPort",
            "InternalHealthCheckPort"
          ]
        },
        {
          "Label": {
            "default": "Worker Node Instance Configuration"
          },
          "Parameters": [
            "ASKeyPair",
            "CIDRForASAccess"
          ]
        }
      ],
      "ParameterLabels": {
        "VPCCIDR": {
          "default": "Please enter the VPC specific details here"
        }
      }
    }
  },
  "Parameters": {
    "ScaleUpThreshold": {
      "Type": "Number",
      "Default": "80",
      "Description": "Enter the value at which a Scaleup event would take place"
    },
    "ScaleDownThreshold": {
      "Type": "Number",
      "Default": "40",
      "Description": "Enter the value at which a Scaledown event would take place"
    },
    "ScalingParameter": {
      "Type": "String",
      "Default": "CPUUtilization",
      "AllowedValues": [
        "CPUUtilization",
        "MemoryUtilization",
        "ConcurrentSessions",
        "SessionSetupRate"
      ],
      "Description": "Please refer the url https://s3.amazonaws.com/fortinet-autoscaling/Fortinet+Auto+Scaling+in+AWS_Guidelines_Q1+2016.pdf for recommended values for ScaleUp and ScaleDown"
    },
    "VPCCIDR": {
      "Type": "String",
      "Default": "10.0.0.0/16",
      "Description": "Enter the VPC CIDR that you want to use"
    },
    "Public1Subnet": {
      "Type": "String",
      "Default": "10.0.0.0/24",
      "Description": "Enter the value of the Public1 subnet"
    },
    "Public2Subnet": {
      "Type": "String",
      "Default": "10.0.2.0/24",
      "Description": "Enter the value of the Public2 subnet"
    },
    "CIDRForASAccess": {
      "Type": "String",
      "Description": "Enter the CIDR from which AS instance needs to be accessed"
    },
    "CIDRForFortiGateAccess": {
      "Type": "String",
      "Description": "Enter the CIDR from which FortiGate instances needs to be accessed"
    },
    "Private1Subnet": {
      "Type": "String",
      "Default": "10.0.1.0/24",
      "Description": "Enter the value of the Private1 subnet"
    },
    "Private2Subnet": {
      "Type": "String",
      "Default": "10.0.3.0/24",
      "Description": "Enter the value of the Public1 subnet"
    },
    "ScalingPeriod": {
      "Type": "Number",
      "Default": "300",
      "Description": "Enter the number of seconds for the CloudWatchAlarm to trigger the ScaleinPolicy"
    },
    "ASGroupMaxSize": {
      "Type": "Number",
      "Default": "5",
      "Description": "MaximumInstances in the ASG"
    },
    "ListenerPort": {
      "Type": "Number",
      "Default": "80",
      "Description": "Enter the Listener port for the external ELB"
    },
    "HealthCheckPort": {
      "Type": "Number",
      "Default": "541",
      "Description": "Enter the Health Check port used port for the external ELB"
    },
    "InternalListenerPort": {
      "Type": "Number",
      "Default": "80",
      "Description": "Enter the Listener port for the Internal ELB"
    },
    "InternalHealthCheckPort": {
      "Type": "Number",
      "Default": "80",
      "Description": "Enter the Health Check port used port for the Internal ELB"
    },
    "InitialFortiGateInstanceType": {
      "Type": "String",
      "Default": "c4.large",
      "AllowedValues": [
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c5.large",
        "c5.xlarge",
        "c5.2xlarge",
        "c5.4xlarge",
        "c5.9xlarge",
        "c5.18xlarge"
      ],
      "Description": "Enter the instance type and size that you want for the Initial FortiGates"
    },
    "FortiGateInstanceType": {
      "Type": "String",
      "Default": "c4.large",
      "AllowedValues": [
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c5.large",
        "c5.xlarge",
        "c5.2xlarge",
        "c5.4xlarge",
        "c5.9xlarge",
        "c5.18xlarge"
      ],
      "Description": "Enter the instance type and size that you want for the AutoScaled FortiGates"
    },
    "ASKeyPair": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Enter the keypair that you want to associate with the launch of the worker node"
    },
    "FortiGateKeyPair": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Enter the keypair that you want to associate with the launch of the FortiGates"
    },
    "AZForFirewall1": {
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Description": "Enter the AZ for the primary firewall"
    },
    "AZForFirewall2": {
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Description": "Enter the AZ for the backup firewall"
    },
    "ASQueue": {
      "Type": "String",
      "Description": "Enter the Queue Name that would be used by the AutoScaling Group"
    }
  },
  "Mappings": {
    "DefaultScalingupDownMap": {
      "CPUUtilization": {
        "ScaleUp": "80",
        "ScaleDown": "60"
      },
      "MemoryUtilization": {
        "ScaleUp": "80",
        "ScaleDown": "60"
      },
      "ConcurrentSessions": {
        "ScaleUp": "80",
        "ScaleDown": "60"
      },
      "SessionSetupRate": {
        "ScaleUp": "8000",
        "ScaleDown": "600"
      }
    },
   "RegionMap": {
      "us-east-1": {
        "fgtami": "ami-2e6dc151",
        "workerami": "ami-6245d474"
      },
      "us-east-2": {
        "fgtami": "ami-a0cffcc5",
        "workerami": "ami-349db951"
      },
      "eu-west-1": {
        "fgtami":   "ami-775c7c0e",
        "workerami": "ami-dccbcfba"
      },
      "eu-west-2": {
        "fgtami":   "ami-1c90737b",
        "workerami": "ami-04c4d060"
      },
      "eu-west-3": {
        "fgtami": "ami-ebdb6a96",
        "workerami": "ami-aca91fd1"
      },
      "us-gov-west-1": {
        "fgtami":   "ami-cc1682ad",
        "workerami": "ami-55e17434"
      },
      "eu-central-1": {
        "fgtami": "ami-eafadf01",
        "workerami": "ami-8869bbe7"
      },
      "ap-northeast-1": {
        "fgtami": "ami-6e0f1412",
        "workerami": "ami-860926e1"
      },
      "ap-northeast-2": {
        "fgtami": "ami-2b43ed45",
        "workerami": "ami-c818caa6"
      },
      "ap-southeast-1": {
        "fgtami": "ami-14133168",
        "workerami": "ami-4f52eb2c"
      },
      "ap-southeast-2": {
        "fgtami": "ami-e913d88b",
        "workerami": "ami-44262f27"
      },
      "ap-south-1": {
        "fgtami":   "ami-b5486eda",
        "workerami": "ami-16c7b479"
      },
      "sa-east-1": {
        "fgtami": "ami-2f9bcb43",
        "workerami": "ami-b0d3b1dc"
      },
      "us-west-1": {
        "fgtami": "ami-42809222",
        "workerami": "ami-6480a504"
      },
      "us-west-2": {
        "fgtami": "ami-934b24eb",
        "workerami": "ami-752ab815"
      },
      "ca-central-1": {
        "fgtami": "ami-c5f978a1",
        "workerami": "ami-1ed16d7a"
      }
    }
  },
  "Conditions": {
    "CPUSelection": {
      "Fn::Equals": [
        {
          "Ref": "ScalingParameter"
        },
        "CPUUtilization"
      ]
    },
    "MemorySelection": {
      "Fn::Equals": [
        {
          "Ref": "ScalingParameter"
        },
        "MemoryUtilization"
      ]
    },
    "ConcurrentSessionsSelection": {
      "Fn::Equals": [
        {
          "Ref": "ScalingParameter"
        },
        "ConcurrentSessions"
      ]
    },
    "SessionSetupRateSelection": {
      "Fn::Equals": [
        {
          "Ref": "ScalingParameter"
        },
        "SessionSetupRate"
      ]
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCCIDR"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "VPC"
                ]
              ]
            }
          }
        ]
      }
    },
    "Subnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "Public1Subnet"
        },
        "AvailabilityZone": {
          "Ref": "AZForFirewall1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "PublicSubnet1"
                ]
              ]
            }
          }
        ]
      }
    },
    "Subnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "Public2Subnet"
        },
        "AvailabilityZone": {
          "Ref": "AZForFirewall2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "PublicSubnet2"
                ]
              ]
            }
          }
        ]
      }
    },
    "Subnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "Private1Subnet"
        },
        "AvailabilityZone": {
          "Ref": "AZForFirewall1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "PrivateSubnet1"
                ]
              ]
            }
          }
        ]
      }
    },
    "Subnet4": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "Private2Subnet"
        },
        "AvailabilityZone": {
          "Ref": "AZForFirewall2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "PrivateSubnet2"
                ]
              ]
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "IGW"
                ]
              ]
            }
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "MyQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": {
          "Ref": "ASQueue"
        },
        "ReceiveMessageWaitTimeSeconds": "20"
      }
    },
    "SQSRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "autoscaling.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "WorkerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "WorkerPolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "root",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cloudwatch:*"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "elasticloadbalancing:*"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2:*"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "route53:*"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "sqs:*"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "route53domains:*"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:DescribeAccountLimits",
                "cloudformation:DescribeStackEvents",
                "cloudformation:DescribeStackResource",
                "cloudformation:DescribeStackResources",
                "cloudformation:DescribeStacks",
                "cloudformation:GetStackPolicy",
                "cloudformation:ListStackResources",
                "cloudformation:ListStacks"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "autoscaling:*"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "WorkerRole"
          }
        ]
      }
    },
    "WorkerInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "WorkerRole"
          }
        ]
      }
    },
    "BootfromS3": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "BootfromS3Policies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "root",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "BootfromS3"
          }
        ]
      }
    },
    "BootEC2": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "BootfromS3"
          }
        ]
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "PublicRT"
                ]
              ]
            }
          }
        ]
      }
    },
    "RouteTable1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "InternalRouteTable1"
                ]
              ]
            }
          }
        ]
      }
    },
    "RouteTable2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "InternalRouteTable2"
                ]
              ]
            }
          }
        ]
      }
    },
    "Route1": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "Route2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable1"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NetworkInterfaceId": {
          "Ref": "OnDemandAENI1"
        }
      }
    },
    "Route3": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable2"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NetworkInterfaceId": {
          "Ref": "OnDemandBENI1"
        }
      }
    },
    "ASLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "fgtami"
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "InstanceType": {
          "Ref": "FortiGateInstanceType"
        },
        "AssociatePublicIpAddress": "true"
      }
    },
    "ASG1": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "DesiredCapacity": "0",
        "LaunchConfigurationName": {
          "Ref": "ASLaunchConfig"
        },
        "MaxSize": {
          "Ref": "ASGroupMaxSize"
        },
        "MinSize": "0",
        "TerminationPolicies": [
          "NewestInstance"
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "Subnet1"
          },
          {
            "Ref": "Subnet2"
          }
        ]
      }
    },
    "ASLaunchConfigforWorkerNode": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "workerami"
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "InstanceType": "t2.micro",
        "AssociatePublicIpAddress": "true"
      }
    },
    "ASG2": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "DesiredCapacity": "0",
        "LaunchConfigurationName": {
          "Ref": "ASLaunchConfigforWorkerNode"
        },
        "MaxSize": "1",
        "MinSize": "0",
        "TerminationPolicies": [
          "NewestInstance"
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "Subnet1"
          },
          {
            "Ref": "Subnet2"
          }
        ]
      }
    },
    "ASLifecycleHook": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "ASG1"
        },
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_LAUNCHING",
        "NotificationTargetARN": {
          "Fn::GetAtt": [
            "MyQueue",
            "Arn"
          ]
        },
        "DefaultResult": "CONTINUE",
        "RoleARN": {
          "Fn::GetAtt": [
            "SQSRole",
            "Arn"
          ]
        }
      }
    },
    "SQSPermission": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Sid": "1",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "SQSRole",
                    "Arn"
                  ]
                }
              },
              "Action": "SQS:*",
              "Resource": {
                "Fn::GetAtt": [
                  "MyQueue",
                  "Arn"
                ]
              }
            },
            {
              "Sid": "2",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Ref": "AWS::AccountId"
                }
              },
              "Action": "SQS:*",
              "Resource": {
                "Fn::GetAtt": [
                  "MyQueue",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Queues": [
          {
            "Fn::GetAtt": [
              "MyQueue",
              "QueueName"
            ]
          }
        ]
      }
    },
    "ScaleInPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "ASG1"
        },
        "ScalingAdjustment": "-1"
      }
    },
    "ScaleOutPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "ASG1"
        },
        "ScalingAdjustment": "1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "CPUSelection",
      "Properties": {
        "EvaluationPeriods": "1",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "ScaleUpThreshold"
        },
        "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
        "Period": {
          "Ref": "ScalingPeriod"
        },
        "AlarmActions": [
          {
            "Ref": "ScaleOutPolicy"
          }
        ],
        "Namespace": "AWS/EC2",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "ASG1"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "MetricName": "CPUUtilization"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "CPUSelection",
      "Properties": {
        "EvaluationPeriods": "1",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "ScaleDownThreshold"
        },
        "AlarmDescription": "Alarm if CPU too low or metric disappears indicating instance is down",
        "Period": {
          "Ref": "ScalingPeriod"
        },
        "AlarmActions": [
          {
            "Ref": "ScaleInPolicy"
          }
        ],
        "Namespace": "AWS/EC2",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "ASG1"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold",
        "MetricName": "CPUUtilization"
      }
    },
    "MemoryAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "MemorySelection",
      "Properties": {
        "EvaluationPeriods": "1",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "ScaleUpThreshold"
        },
        "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
        "Period": {
          "Ref": "ScalingPeriod"
        },
        "AlarmActions": [
          {
            "Ref": "ScaleOutPolicy"
          }
        ],
        "Namespace": "EC2",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "ASG1"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "MetricName": "MemoryUtilization"
      }
    },
    "MemoryAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "MemorySelection",
      "Properties": {
        "EvaluationPeriods": "1",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "ScaleDownThreshold"
        },
        "AlarmDescription": "Alarm if CPU too low or metric disappears indicating instance is down",
        "Period": {
          "Ref": "ScalingPeriod"
        },
        "AlarmActions": [
          {
            "Ref": "ScaleInPolicy"
          }
        ],
        "Namespace": "EC2",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "ASG1"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold",
        "MetricName": "MemoryUtilization"
      }
    },
    "ConcurrentAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "ConcurrentSessionsSelection",
      "Properties": {
        "EvaluationPeriods": "1",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "ScaleUpThreshold"
        },
        "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
        "Period": {
          "Ref": "ScalingPeriod"
        },
        "AlarmActions": [
          {
            "Ref": "ScaleOutPolicy"
          }
        ],
        "Namespace": "EC2",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "ASG1"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "MetricName": "ConcurrentSessions"
      }
    },
    "ConcurrentAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "ConcurrentSessionsSelection",
      "Properties": {
        "EvaluationPeriods": "1",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "ScaleDownThreshold"
        },
        "AlarmDescription": "Alarm if CPU too low or metric disappears indicating instance is down",
        "Period": {
          "Ref": "ScalingPeriod"
        },
        "AlarmActions": [
          {
            "Ref": "ScaleInPolicy"
          }
        ],
        "Namespace": "EC2",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "ASG1"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold",
        "MetricName": "ConcurrentSessions"
      }
    },
    "SessionSetupRateAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "SessionSetupRateSelection",
      "Properties": {
        "EvaluationPeriods": "1",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "ScaleUpThreshold"
        },
        "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
        "Period": {
          "Ref": "ScalingPeriod"
        },
        "AlarmActions": [
          {
            "Ref": "ScaleOutPolicy"
          }
        ],
        "Namespace": "EC2",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "ASG1"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "MetricName": "SessionSetupRate"
      }
    },
    "SessionSetupRateAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "SessionSetupRateSelection",
      "Properties": {
        "EvaluationPeriods": "1",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "ScaleDownThreshold"
        },
        "AlarmDescription": "Alarm if CPU too low or metric disappears indicating instance is down",
        "Period": {
          "Ref": "ScalingPeriod"
        },
        "AlarmActions": [
          {
            "Ref": "ScaleInPolicy"
          }
        ],
        "Namespace": "EC2",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "ASG1"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold",
        "MetricName": "SessionSetupRate"
      }
    },
    "SubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet1"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "SubnetRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet2"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "SubnetRouteTableAssociation3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet3"
        },
        "RouteTableId": {
          "Ref": "RouteTable1"
        }
      }
    },
    "SubnetRouteTableAssociation4": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet4"
        },
        "RouteTableId": {
          "Ref": "RouteTable2"
        }
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Allow All Traffic",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": {
              "Ref": "CIDRForFortiGateAccess"
            }
          }
        ]
      }
    },
    "ASSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Allow SSH",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "TCP",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "CIDRForASAccess"
            }
          }
        ]
      }
    },
    "OnDemandA": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "fgtami"
          ]
        },
        "InstanceType": {
          "Ref": "InitialFortiGateInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "BootEC2"
        },
        "DisableApiTermination": "True",
        "KeyName": {
          "Ref": "FortiGateKeyPair"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "OnDemandAENI0"
            },
            "DeviceIndex": "0"
          },
          {
            "NetworkInterfaceId": {
              "Ref": "OnDemandAENI1"
            },
            "DeviceIndex": "1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "OnDemandA"
                ]
              ]
            }
          },
          {
			"Key": "Fortigate-State",
			"Value": "UnConfigured"
		  },
          {
            "Key": "Fortigate-License",
            "Value": "OnDemand"
          }
        ]
      }
    },
    "OnDemandAENI0": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "eth0",
        "GroupSet": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SourceDestCheck": "true",
        "SubnetId": {
          "Ref": "Subnet1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "OnDemandAENI0"
                ]
              ]
            }
          },
          {
            "Key": "Interface",
            "Value": "eth0"
          }
        ]
      }
    },
    "ASInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "workerami"
          ]
        },
        "InstanceType": "t2.micro",
        "KeyName": {
          "Ref": "ASKeyPair"
        },
        "IamInstanceProfile": {
          "Ref": "WorkerInstanceProfile"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "ASInstanceENI0"
            },
            "DeviceIndex": "0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "ASInstance"
          }
        ]
      }
    },
    "ASInstanceENI0": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "eth0",
        "GroupSet": [
          {
            "Ref": "ASSecurityGroup"
          }
        ],
        "SourceDestCheck": "true",
        "SubnetId": {
          "Ref": "Subnet1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "AS Instance ENI0"
                ]
              ]
            }
          },
          {
            "Key": "Interface",
            "Value": "eth0"
          }
        ]
      }
    },
    "ASEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "DependsOn": "ASInstance"
    },
    "ASEEIPASSOCIATION": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "ASEIP",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "ASInstanceENI0"
        }
      },
      "DependsOn": "ASEIP"
    },
    "OnDemandAEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "DependsOn": "OnDemandA"
    },
    "OnDemandAEIPASSOCIATION": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "OnDemandAEIP",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "OnDemandAENI0"
        }
      },
      "DependsOn": "OnDemandAEIP"
    },
    "OnDemandAENI1": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "Secondary Interface",
        "GroupSet": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "Subnet3"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "OnDemandBENI1"
                ]
              ]
            }
          }
        ]
      }
    },
    "OnDemandB": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "fgtami"
          ]
        },
        "InstanceType": {
          "Ref": "InitialFortiGateInstanceType"
        },
        "KeyName": {
          "Ref": "FortiGateKeyPair"
        },
        "IamInstanceProfile": {
          "Ref": "BootEC2"
        },
        "DisableApiTermination": "True",
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "OnDemandBENI0"
            },
            "DeviceIndex": "0"
          },
          {
            "NetworkInterfaceId": {
              "Ref": "OnDemandBENI1"
            },
            "DeviceIndex": "1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "OnDemandB"
                ]
              ]
            }
          }
        ]
      }
    },
    "OnDemandBENI0": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "eth0",
        "GroupSet": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SourceDestCheck": "true",
        "SubnetId": {
          "Ref": "Subnet2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "OnDemandBENI0"
                ]
              ]
            }
          },
          {
            "Key": "Interface",
            "Value": "eth0"
          }
        ]
      }
    },
    "OnDemandBEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "DependsOn": "OnDemandB"
    },
    "OnDemandBEIPASSOCIATION": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "OnDemandBEIP",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "OnDemandBENI0"
        }
      },
      "DependsOn": "OnDemandBEIP"
    },
    "OnDemandBENI1": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "Secondary Interface",
        "GroupSet": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "Subnet4"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "OnDemandBENI1"
                ]
              ]
            }
          }
        ]
      }
    },
    "IElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
            "Ref": "Subnet3"
          },
          {
            "Ref": "Subnet4"
          }
        ],
        "Scheme": "internal",
        "LoadBalancerName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "IELB"
            ]
          ]
        },
        "Listeners": [
          {
            "LoadBalancerPort": {
              "Ref": "InternalListenerPort"
            },
            "InstancePort": {
              "Ref": "InternalListenerPort"
            },
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": {
            "Fn::Join": [
              "",
              [
                "TCP:",
                {
                  "Ref": "InternalHealthCheckPort"
                }
              ]
            ]
          },
          "HealthyThreshold": "5",
          "UnhealthyThreshold": "2",
          "Interval": "5",
          "Timeout": "2"
        }
      }
    },
    "EElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
            "Ref": "Subnet1"
          },
          {
            "Ref": "Subnet2"
          }
        ],
        "Scheme": "internet-facing",
        "Instances": [
          {
            "Ref": "OnDemandA"
          },
          {
            "Ref": "OnDemandB"
          }
        ],
        "LoadBalancerName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "EELB"
            ]
          ]
        },
        "Listeners": [
          {
            "LoadBalancerPort": {
              "Ref": "ListenerPort"
            },
            "InstancePort": {
              "Ref": "ListenerPort"
            },
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": {
            "Fn::Join": [
              "",
              [
                "TCP:",
                {
                  "Ref": "HealthCheckPort"
                }
              ]
            ]
          },
          "HealthyThreshold": "5",
          "UnhealthyThreshold": "2",
          "Interval": "5",
          "Timeout": "2"
        }
      }
    }
  },
  "Outputs": {
    "ASInstance": {
      "Value": {
        "Ref": "ASEIP"
      },
      "Description": "Connect to Amazon Linux Worker Node instance using ssh to this IP"
    },
    "ExternalELB": {
      "Value": {
        "Fn::GetAtt": [
          "EElasticLoadBalancer",
          "DNSName"
        ]
      },
      "Description": "External Elastic Load Balancer"
    },
    "Fortigate1": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "OnDemandAEIP"
            }
          ]
        ]
      },
      "Description": "Connection to Fortigate1"
    },
    "UsernameforFortiGate1": {
      "Value": "admin",
      "Description": "Username to Access Fortigate"
    },
    "PasswordforFortiGate1": {
      "Value": {
        "Ref": "OnDemandA"
      },
      "Description": "Password to login to Fortigate is the instance id"
    },
    "Fortigate2": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "OnDemandBEIP"
            }
          ]
        ]
      },
      "Description": "Connection to Fortigate2"
    },
    "UsernameforFortiGate2": {
      "Value": "admin",
      "Description": "Username to Access Fortigate"
    },
    "PasswordforFortiGate2": {
      "Value": {
        "Ref": "OnDemandB"
      },
      "Description": "Password to login to Fortigate is the instance id"
    }
  }
}
