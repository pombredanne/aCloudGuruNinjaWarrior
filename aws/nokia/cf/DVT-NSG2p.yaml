AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy Nokia NSG to VPC.'
#TBD - add in support for multi-AZ solution when available 
Parameters:
  VPCStackName:
    Description: 'Name of VPC Stack to deploy NSG to'
    Type: String
  VPCName:
    Description: 'Name of VPC'
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
#  VPCID:
#    Description: VPC ID
#    Type: AWS::EC2::VPC::Id
#    ConstraintDescription: Must be from existing VPC
#  SUBNETID:
#    Description: Subnet ID
#    Type: AWS::EC2::Subnet::Id
#    ConstraintDescription: Must be from existing subnet
#  SUBNETIDPORT1:
#    Description: Subnet ID for Port1 interface
#    Type: AWS::EC2::Subnet::Id
#    ConstraintDescription: Must be from existing subnet
#  SecGroup:
#    Description: Security Group IDs
#    Type: List<AWS::EC2::SecurityGroup::Id>
#    ConstraintDescription: Security Groups already created
#  SecGroup1:
#    Description: Security Group ID for port1
#    Type: List<AWS::EC2::SecurityGroup::Id>
#    ConstraintDescription: Security Groups already created
  AMI:
    Description: Enter AMI-ID for Instance
    Type: AWS::EC2::Image::Id
    ConstraintDescription: Security Groups already created
 #TBD - could have different performance levels and map these onto different instance types
  InstanceType:
    Description: NSG EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
    - t2.small
    - t2.medium
    - m4.large
    - c3.8xlarge
    - c4.8xlarge
    - g2.8xlarge
    - r3.8xlarge
    - i2.8xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - m2.4xlarge
    - m4.4xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  InstanceName:
    Description: Enter Name for Instance
    ConstraintDescription: Instance Name
    Type: String
Resources:

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          #Use default primary volume size for now - may need to increase later. 
#         VolumeSize: 24
#         VolumeType: gp2
          DeleteOnTermination: true
            
#Use default primary volume size for now - may need to increase later.
 
      Tags:
      - Key: Name
        Value:
          Ref: InstanceName
      - Key: Cost_ByVPC
        Value: !Ref VPCStackName
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      ImageId:
        Ref: AMI
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#cloud-config\n"
            - 'aws_image: true
#
#autobootstrap stuff removed
#'
#            - 'nuage_nsg:
#
#'
#            - "    proxyFQDN: proxy.dc.nuagedemo.net\n"
#            - "    enterpriseID: null\n"
#            - "    NSGatewayID: null\n"
#            - "    NSGType: NSG-AMI\n"
#            - "    signature: F0iKCcWVQQQEAU1SG0CiJTR0SwOWBr8D7MrB4S1Qw8aLhJAkB8uX6GV4LCa2LFFvL4pemiZ0u/9XPia12l8GQ3w3u4QeWX14H0ZkiSFaWdm9Perp1hmc8cLnMyPvXgty4mt8uKU12lOlmg5tDuX+X8fvC1mSEgP4hX4gEtknL0uHCeEV2HVGUWesgQYKgORhFdE3ug8nbsmaCeeRbHLlsWk+X+5lNinWbfPc9XAAkJsU5yX2TLpOewLedfQLqzxrOOHOC37n44SEMAMo7j+eQQevpKoMEao+gpyvLKj8V63hAgB3mlIyWYtgaC5u9pYw0keJ2E0Qj9Ep0p+TI+tINg=="
      NetworkInterfaces:
      - NetworkInterfaceId:
          Ref: NetworkENI
        DeviceIndex: '0'
      - NetworkInterfaceId:
          Ref: AccessENI
        DeviceIndex: '1'
 
  NSGSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for DVT NSG
        VpcId: 
            Fn::ImportValue: !Sub "${VPCStackName}-VPC"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
          Description: "To bootstrap the NSG"
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
          Description: "To access NSG for diagnostics"
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
          Description: "To access NSG for diagnostics"
        - IpProtocol: tcp
          FromPort: '893'
          ToPort: '893'
          CidrIp: 0.0.0.0/0
          Description: "For administrative access to NSG"
        - IpProtocol: '50'
          FromPort: '0'
          ToPort: '0'
          CidrIp: 0.0.0.0/0
          Description: "ESP from remote endpoints"
        - IpProtocol: udp
          FromPort: '5770'
          ToPort: '5770'
          CidrIp: 0.0.0.0/0
          Description: "IPSEC from remote endpoints"
        - IpProtocol: '50'         
          FromPort: '0'
          ToPort: '0'
          CidrIp: 0.0.0.0/0
          Description: "GRE from remote endpoints"
        - IpProtocol: udp
          FromPort: '4789'
          ToPort: '4789'
          CidrIp: 0.0.0.0/0
          Description: "VXLAN from remote endpoints"
        - IpProtocol: udp
          FromPort: '4500'
          ToPort: '4500'
          CidrIp: 0.0.0.0/0
          Description: "IPSEC from remote endpoints"
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
          Description: "Admin"
        - IpProtocol: '1'
          FromPort: '0'
          ToPort: '0'
          CidrIp: 0.0.0.0/0
          Description: "Ping test"

    #Interface for network port
  NetworkENI:
        Type: AWS::EC2::NetworkInterface
        DependsOn: NSGSecurityGroup
        Properties:
            SubnetId: 
                Fn::ImportValue: !Sub "${VPCStackName}-SubnetA1"
            GroupSet: [!Ref 'NSGSecurityGroup']
            SourceDestCheck: 'false'
      
 #Interface for access port
  AccessENI:
        Type: AWS::EC2::NetworkInterface
        DependsOn: NSGSecurityGroup
        Properties:
            SubnetId: 
                Fn::ImportValue: !Sub "${VPCStackName}-SubnetA2"
            GroupSet: [!Ref 'NSGSecurityGroup']
            SourceDestCheck: 'false'
  NSGEIP:
        Type: AWS::EC2::EIP
        Properties:
            Domain: 
                Fn::ImportValue: !Sub "${VPCStackName}-SubnetA1"
  EIPNsgAssoc:
        Type: AWS::EC2::EIPAssociation
        Properties:
            AllocationId:
                Fn::GetAtt:
                - NSGEIP
                - AllocationId
            NetworkInterfaceId:
                Ref: NetworkENI
Outputs:
  InstanceId:
    Description: InstanceId of the newly created NSG instance
    Value:
      Ref: EC2Instance
  SubnetA1:
    Description: 'Access ENI of SDWAN NSG.'
    Value: !Ref AccessENI
    Export:
      Name: !Sub '${AWS::StackName}-AccessENI'


